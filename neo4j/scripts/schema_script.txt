// Delete all data before running
MATCH (n)
DETACH DELETE n;


// Create Nodes
// User
LOAD CSV WITH HEADERS FROM 'file:///auth_user.csv' AS line with line where line.id is not null
MERGE (: User {
    id: toInteger(line.id),
    password: line.password,
    username: line.username,
    role: toInteger(line.role),
    is_active: (case line.is_active when '1' then true else false end),
    date_joined: date()
});

// Album
LOAD CSV WITH HEADERS FROM 'file:///music_album.csv' AS line with line where line.id is not null
MERGE (: Album {
    id: toInteger(line.id),
    name: line.name,
    release_date: date(line.release_date),
    album_type: toInteger(line.album_type)
});

// Artist
LOAD CSV WITH HEADERS FROM 'file:///music_artist.csv' AS line with line where line.id is not null
MERGE (: Artist {id: toInteger(line.id), name: line.name});

// Recording
LOAD CSV WITH HEADERS FROM 'file:///music_recording.csv' AS line with line where line.id is not null
MERGE (: Recording {
    id: toInteger(line.id),
    name: line.name,
    duration: duration({
        minutes: toInteger(line.minutes),
        seconds: toInteger(line.seconds)
    })
});

// Track
LOAD CSV WITH HEADERS FROM 'file:///music_track.csv' AS line with line where line.id is not null
MERGE (: Track {id: toInteger(line.id), track_number: line.track_number});

// Playlist
LOAD CSV WITH HEADERS FROM 'file:///playlist_playlist.csv' AS line with line where line.id is not null
MERGE (: Playlist {
    id: toInteger(line.id),
    name: line.name,
    description: line.description,
    is_public: (case line.is_public when '1' then true else false end)
});


// Create Relationships
// User-ENQUEUES->Recording
LOAD CSV WITH HEADERS FROM 'file:///listening_inqueue.csv' AS line with line where line.id is not null
MATCH (user: User {id: toInteger(line.user_id)})
MATCH (recording: Recording {id: toInteger(line.recording_id)})
MERGE (user)-[: ENQUEUES {queue_index: toInteger(line.queue_index)}]->(recording);

// User-IS_LISTENING_TO->Recording
LOAD CSV WITH HEADERS FROM 'file:///listening_userqueue.csv' AS line with line where line.id is not null
MATCH (user: User {id: toInteger(line.user_id)})
MATCH ((user)-[: ENQUEUES {queue_index: toInteger(line.queue_index)}]->(recording: Recording))
MERGE (user)-[: IS_LISTENING_TO {
    repeat_state: toInteger(line.repeat_state),
    is_playing: (case line.is_playing when '1' then true else false end),
    progress: duration({
        minutes: toInteger(line.minutes),
        seconds: toInteger(line.seconds)
    })
}]->(recording);

// Artist-OWNS->Album
LOAD CSV WITH HEADERS FROM 'file:///music_album_owner.csv' AS line with line where line.id is not null
MATCH (artist: Artist {id: toInteger(line.artist_id)})
MATCH (album: Album {id: toInteger(line.album_id)})
MERGE (artist)-[: OWNS]->(album);

// Recording-CREDITS->Artist
LOAD CSV WITH HEADERS FROM 'file:///music_credit.csv' AS line with line where line.id is not null
MATCH (recording: Recording {id: toInteger(line.recording_id)})
MATCH (artist: Artist {id: toInteger(line.artist_id)})
MERGE (recording)-[: CREDITS {role: toInteger(line.role)}]->(artist);

// Album-HAS->Track
LOAD CSV WITH HEADERS FROM 'file:///music_track.csv' AS line with line where line.id is not null
MATCH (album: Album {id: toInteger(line.album_id)})
MATCH (track: Track {id: toInteger(line.id)})
MERGE (album)-[: HAS]->(track);

// Recording-APPEARS_ON->Track
LOAD CSV WITH HEADERS FROM 'file:///music_track.csv' AS line with line where line.id is not null
MATCH (recording: Recording {id: toInteger(line.recording_id)})
MATCH (track: Track {id: toInteger(line.id)})
MERGE (recording)-[: APPEARS_ON]->(track);

// User-CREATES->Playlist
LOAD CSV WITH HEADERS FROM 'file:///playlist_playlist.csv' AS line with line where line.id is not null
MATCH (user: User {id: toInteger(line.user_id)})
MATCH (playlist: Playlist {id: toInteger(line.id)})
MERGE (user)-[: CREATES {time_created: datetime()}]->(playlist);

// Recording-IS_ADDED_TO->Playlist
LOAD CSV WITH HEADERS FROM 'file:///playlist_playlistcontent.csv' AS line with line where line.id is not null
MATCH (recording: Recording {id: toInteger(line.recording_id)})
MATCH (playlist: Playlist {id: toInteger(line.playlist_id)})
MERGE (recording)-[: IS_ADDED_TO {time_added: datetime()}]->(playlist);